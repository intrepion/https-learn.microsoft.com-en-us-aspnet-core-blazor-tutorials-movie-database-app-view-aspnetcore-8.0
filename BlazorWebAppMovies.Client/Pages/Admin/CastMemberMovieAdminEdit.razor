@page "/admin/cast-member-movie-edit"
@page "/admin/cast-member-movie-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject ICastMemberMovieAdminService CastMemberMovieAdminService

@inject ICastMemberAdminService CastMemberAdminService
@inject IMovieAdminService MovieAdminService
@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>Cast Member Movie Creation</PageTitle>
  }
  else
  {
    <PageTitle>Cast Member Movie Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>Cast Member Movie Creation</h1>
  }
  else
  {
    <h1>Cast Member Movie Modification</h1>
  }
  <article>
    <EditForm class="container" Model="castMemberMovieAdminEditModel" OnSubmit="HandleSubmit">

      <div class="row">
        <div class="col">
          <label>
            Cast Member:
            <select @onchange="CastMemberOnChange">
              <option>Select cast member...</option>
                @if (castMemberList != null)
                {
                  @foreach (var castMember in castMemberList)
                  {
                    if (castMemberMovieAdminEditModel.CastMember != null && castMemberMovieAdminEditModel.CastMember.Id.Equals(castMember.Id))
                    {
                      <option value="@castMember.Id" selected>@castMember?.Name1 @castMember?.Name2</option>
                    }
                    else
                    {
                      <option value="@castMember.Id">@castMember?.Name1 @castMember?.Name2</option>
                    }
                  }
                }
              </select>
          </label>
        </div>
      </div>
      @* EditRowCodePlaceholder *@

      <div class="row">
        <div class="col">
          @if (!Id.Equals(Guid.Empty))
          {
            <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
          }
        </div>
        <div class="col">
          <a href="/admin/cast-member-movie-list">Cancel</a>
          @if (Id.Equals(Guid.Empty))
          {
            <button type="submit" class="btn btn-primary">Create</button>
          }
          else
          {
            <button type="submit" class="btn btn-primary">Modify</button>
          }
         </div>
      </div>
    </EditForm>
  </article>
</section>

@code {
  [Parameter]
  public Guid Id { get; set; }
  CastMemberMovieAdminEditModel castMemberMovieAdminEditModel { get; set; } = new CastMemberMovieAdminEditModel();

  List<CastMember> castMemberList { get; set; } = [];
    @* ListDeclarationCodePlaceholder *@

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    await base.OnInitializedAsync();

    var castMemberListResult = await CastMemberAdminService.GetAllAsync(userName);
        if (castMemberListResult != null)
        {
            castMemberList = castMemberListResult;
        }
        @* OnInitializedCodePlaceholder *@
  }

  protected override async Task OnParametersSetAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    var databaseCastMemberMovieAdminDto = await CastMemberMovieAdminService.GetByIdAsync(userName, Id);

    if (databaseCastMemberMovieAdminDto == null)
    {
      castMemberMovieAdminEditModel = new CastMemberMovieAdminEditModel();
    }
    else
    {
      castMemberMovieAdminEditModel = CastMemberMovieAdminEditModel.FromCastMemberMovieAdminDto(databaseCastMemberMovieAdminDto);
    }
  }

  async Task HandleSubmit()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    @* RequiredPropertyPlaceholder *@

    @* if (string.IsNullOrWhiteSpace(castMemberMovieAdminEditModel.Name))
    {
      return;
    } *@

    var castMemberMovieAdminDto = CastMemberMovieAdminEditModel.ToCastMemberMovieAdminDto(castMemberMovieAdminEditModel);
    castMemberMovieAdminDto.ApplicationUserName = userName;

    if (Id.Equals(Guid.Empty))
    {
      var newCastMemberMovieAdminDto = await CastMemberMovieAdminService.AddAsync(castMemberMovieAdminDto);

      if (newCastMemberMovieAdminDto == null)
      {
        return;
      }

      NavigationManager.NavigateTo($"/admin/cast-member-movie-edit/{newCastMemberMovieAdminDto.Id}");
    }
    else
    {
      await CastMemberMovieAdminService.EditAsync(castMemberMovieAdminDto);
    }
  }

  async Task Remove()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name!;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    await CastMemberMovieAdminService.DeleteAsync(userName, Id);
    NavigationManager.NavigateTo($"/admin/cast-member-movie-list");
  }

  void CastMemberOnChange(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            return;
        }

        var id = (string)args.Value;
        castMemberMovieAdminEditModel.CastMember = castMemberList?.Where(x => x.Id.ToString().Equals(id)).FirstOrDefault();
    }

    @* OnChangeCodePlaceholder *@
}
