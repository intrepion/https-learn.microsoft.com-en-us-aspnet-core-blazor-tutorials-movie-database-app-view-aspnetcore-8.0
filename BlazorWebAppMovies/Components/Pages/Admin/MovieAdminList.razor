@page "/admin/movie-list"
@rendermode InteractiveServer
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IMovieAdminService MovieAdminService
@attribute [StreamRendering]

<PageTitle>Movie List</PageTitle>

<section>
  <h1>Movie List</h1>
  <article>
    <table class="table table-striped table-sm">
      <thead>
        <tr>
          <th scope="col">Id</th>

          <th scope="col">Cast Member Movies</th>
              @* ListHeaderCodePlaceholder *@

          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (movies == null)
        {
          <tr>
            @* LoadingCountCodePlaceholder *@
          </tr>
        }
        else if (movies.Count == 0)
        {
          <tr>
            @* ZeroCountCodePlaceholder *@
          </tr>
        }
        else
        {
          @foreach (var movie in movies)
          {
            <tr>
              <td>@movie.Id</td>

              <td>
                @if (movie.CastMemberMovies != null)
                {
                  var first = true;
                  foreach (var x in movie.CastMemberMovies)
                  {
                    if (first)
                    {
                      first = false;
                    }
                    else
                    {
                      <span>, </span>
                    }
                    <span>@x?.CastMember.Name1 @x?.CastMember.Name2</span>
                  }
                }
              </td>
              @* ListItemCodePlaceholder *@

              <td>
                <a href="@("/admin/movie-edit/" + movie.Id)">Edit</a>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
    <a href="/admin/movie-edit">Create</a>
  </article>
</section>

@code {
  List<Movie>? movies = null;

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    movies = await MovieAdminService.GetAllAsync(userName);
  }
}
